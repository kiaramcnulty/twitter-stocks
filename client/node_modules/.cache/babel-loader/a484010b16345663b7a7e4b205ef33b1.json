{"ast":null,"code":"var _jsxFileName = \"/Users/kiaramcnulty/Documents/396WebDev/twitter-stocks/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { TwitterTweetEmbed } from 'react-twitter-embed';\nimport 'rbx/index.css';\nimport { Button, Container, Title } from 'rbx';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { faCheckSquare, faCoffee, faTwitterSquare } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlibrary.add(fab, faCheckSquare, faCoffee, faTwitterSquare); // Search for Tweets within the past seven days\n// https://developer.twitter.com/en/docs/twitter-api/tweets/search/quick-start/recent-search\n// function App() {\n//   const [stockData, setStockData] = useState([]);\n//   useEffect(() => {\n//     const fetchStockData = async () => {\n//       const response = await fetch('http://localhost:8081/stocks');\n//       if (!response.ok) throw response;\n//       const json = await response.json();\n//       setStockData(json);\n//   }\n//   fetchStockData();\n//   }, [])\n//   if (!stockData.data) {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <p>\n//             $AAPL. Loading...\n//           </p>\n//         </header>\n//       </div>\n//     );\n//   }\n//   else if (stockData.data.length > 0) {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <p>\n//             $AAPL\n//           </p>\n//           <TwitterTweetEmbed tweetId={stockData.data[0].id}/>\n//         </header>\n//       </div>\n//     )\n//   }\n//   else {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <p>\n//             $AAPL. No tweets found.\n//           </p>\n//         </header>\n//       </div>\n//     )\n//   }\n// }\n\nconst Banner = ({\n  title\n}) => /*#__PURE__*/_jsxDEV(Title, {\n  children: title\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 69,\n  columnNumber: 3\n}, this);\n\n_c = Banner;\n\nconst TweetList = ({\n  tweets\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: tweets.map(tweet => /*#__PURE__*/_jsxDEV(Tweet, {\n    tweet: tweet\n  }, tweet.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 27\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 73,\n  columnNumber: 3\n}, this); // pass in\n\n\n_c2 = TweetList;\n\nconst Tweet = ({\n  tweet\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n    icon: [\"fab\", \"twitter-square\"]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: tweet.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 3\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 81,\n  columnNumber: 3\n}, this);\n\n_c3 = Tweet;\n\nconst App = () => {\n  _s();\n\n  const [stockList, setStockList] = useState({\n    data: []\n  });\n  const url = 'http://localhost:8081/stocks';\n  useEffect(() => {\n    const fetchStockList = async () => {\n      const response = await fetch(url);\n      if (!response.ok) throw response;\n      const json = await response.json();\n      setStockList(json);\n    };\n\n    fetchStockList();\n  }, []);\n\n  if (stockList.data) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Banner, {\n        title: 'AAPL'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TweetList, {\n        tweets: stockList.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(App, \"O2bP++NVDf3tZcOgupEK3HrOdlc=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Banner\");\n$RefreshReg$(_c2, \"TweetList\");\n$RefreshReg$(_c3, \"Tweet\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/Users/kiaramcnulty/Documents/396WebDev/twitter-stocks/client/src/App.js"],"names":["React","useState","useEffect","TwitterTweetEmbed","Button","Container","Title","FontAwesomeIcon","library","fab","faCheckSquare","faCoffee","faTwitterSquare","add","Banner","title","TweetList","tweets","map","tweet","id","Tweet","text","App","stockList","setStockList","data","url","fetchStockList","response","fetch","ok","json"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { TwitterTweetEmbed } from 'react-twitter-embed';\nimport 'rbx/index.css';\nimport { Button, Container, Title } from 'rbx';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { faCheckSquare, faCoffee, faTwitterSquare } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(fab, faCheckSquare, faCoffee, faTwitterSquare)\n\n// Search for Tweets within the past seven days\n// https://developer.twitter.com/en/docs/twitter-api/tweets/search/quick-start/recent-search\n\n\n// function App() {\n\n//   const [stockData, setStockData] = useState([]);\n\n//   useEffect(() => {\n//     const fetchStockData = async () => {\n//       const response = await fetch('http://localhost:8081/stocks');\n//       if (!response.ok) throw response;\n//       const json = await response.json();\n//       setStockData(json);\n//   }\n//   fetchStockData();\n//   }, [])\n\n//   if (!stockData.data) {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <p>\n//             $AAPL. Loading...\n//           </p>\n//         </header>\n//       </div>\n//     );\n//   }\n//   else if (stockData.data.length > 0) {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <p>\n//             $AAPL\n//           </p>\n//           <TwitterTweetEmbed tweetId={stockData.data[0].id}/>\n//         </header>\n//       </div>\n//     )\n//   }\n//   else {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <p>\n//             $AAPL. No tweets found.\n//           </p>\n//         </header>\n//       </div>\n//     )\n\n//   }\n  \n// }\nconst Banner = ({ title }) => (\n  <Title>{ title }</Title>\n);\n\nconst TweetList = ({ tweets }) => (\n  <div>\n    {/* { courses.map(course => <TwitterTweetEmbed tweetId={parseInt(course.id)}/>) } */}\n    { tweets.map(tweet => <Tweet key={tweet.id} tweet={ tweet } />) }\n  </div>\n);\n\n// pass in\nconst Tweet = ({ tweet }) => (\n  <div>\n  <FontAwesomeIcon icon={[\"fab\", \"twitter-square\"]} />\n  <p>\n    {/* <TwitterTweetEmbed \n        // Here goes your copied ID.\n        tweetId={tweet.id}  */}\n        {/* <i class=\"fab fa-twitter-square\"></i> */}\n        \n        {tweet.text}\n{/* /> */}\n  </p>\n  </div>\n);\n\nconst App = () => {\n  const [stockList, setStockList] = useState({ data: [] });\n  const url = 'http://localhost:8081/stocks';\n\n  useEffect(() => {\n    const fetchStockList = async () => {\n      const response = await fetch(url);\n      if (!response.ok) throw response;\n      const json = await response.json();\n      setStockList(json);\n    }\n    fetchStockList();\n  }, [])\n\n  if (stockList.data) {\n    return (\n      <Container>\n        <Banner title={ 'AAPL' } />\n        <TweetList tweets={ stockList.data } />\n      </Container>\n\n    );\n  }\n  else {\n    return (<div>Loading...</div>);\n  }\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}